<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export4.dtd">
<en-export export-date="20211025T233539Z" application="Evernote" version="10.22.3">
  <note>
    <title>lisa-groundhog layers</title>
    <created>20160130T230928Z</created>
    <updated>20160130T231027Z</updated>
    <note-attributes>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
<en-note style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;">
Layer
<div>MultiLayer</div>
<div>SoftmaxLayer</div>
<div>HierarchicalSoftmaxLayer</div>
<div>LSTMLayer</div>
<div>RecurrentLayer</div>
<div>RecursiveConvolutionLayer</div>
<div>UnaryOp</div>
<div>Shift</div>
<div>LastState</div>
<div>DropOp</div>
<div>Concatenate</div>
</en-note>      ]]>
    </content>
  </note>
  <note>
    <title>Influence</title>
    <created>20160131T001101Z</created>
    <updated>20160131T001510Z</updated>
    <note-attributes>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
<en-note style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;">
Festinger - cognitive dissonance
<div>experiment - $20 vs $1 to lie</div>
<div>-&gt; $1 changed beliefs</div>
<div>Americans in Korea, captured by China</div>
<div>rice for propaganda, most became Communist</div>
<div><br/></div>
<div><br/></div>
<div>'We have to take our country back'</div>
<div>* No details</div>
<div>- Listener fills in details</div>
<div>-&gt; don't sell past the close</div>
<div><br/></div>
<div>* Loss response &gt; gain response</div>
<div><br/></div>
<div><br/></div>
<div>* When you laugh, you look at the person you're most comfortable with</div>
<div>* Feet pointing towards you -&gt; at ease</div>
<div>* People remember first &amp; last moments most clearly</div>
<div>* Concert or amusement park for first dates - excitement</div>
<div>* Silence encourages the other to talk more</div>
<div>* A mirror behind customer service - people like to check themselves/others in line</div>
<div>* Sitting next to someone discourages badmouthing</div>
<div>* Sincere excitement when seeing someone elicits the same reaction from them next time</div>
<div>* Ask for small favours - encourages people to like you</div>
<div>* Confidence boost in meeting - pretend interviewer is your best friend</div>
<div>* Mirror body language to build trust</div>
<div>* Cold hands - wear gloves -&gt; warm handshake</div>
<div>* Laughter causes happiness</div>
<div>* Teaching is the best way to learn</div>
<div>* Use names in conversation</div>
</en-note>      ]]>
    </content>
  </note>
  <note>
    <title>Node</title>
    <created>20160131T001800Z</created>
    <updated>20160131T001812Z</updated>
    <note-attributes>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
<en-note style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;">
class Node {
<div>     char ch = START;</div>
<div>     List&lt;Node&gt; = List.newArrayList();</div>
<div>     void add (String str) {</div>
<div>          if (str.length() == 0)</div>
<div>               return;</div>
<div>          char chNew = str.charAt(0);</div>
<div>          for (Node n : nodes) {</div>
<div>               if (n.ch == chNew) {</div>
<div>                    n.add (str.substring(1));</div>
<div>                    return;</div>
<div>               }</div>
<div>          Node newNode = new Node();</div>
<div>          <a href="http://newNode.ch">newNode.ch</a> = chNew;</div>
<div>          new Node.add(str.substring(1));</div>
<div>          nodes.add(newNode);</div>
<div>     }</div>
<div>     String toRegexp() {</div>
<div>          StringBuilder</div>
</en-note>      ]]>
    </content>
  </note>
  <note>
    <title>FST (openfst? morfologik?)</title>
    <created>20160131T001835Z</created>
    <updated>20160131T002057Z</updated>
    <note-attributes>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
<en-note style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;">
for (StateIterator&lt; FST&lt;A&gt;&gt; siter(fst);
<div>     !siter.Done();</div>
<div>     siter.Next() {</div>
<div>     StateId s = siter.Value();</div>
<div>     if (fst.Final(s) != Weight::Zero()) {</div>
<div>          //do stuff</div>
<div>     }</div>
<div>}</div>
<div><br/></div>
<div>-&gt; Weight::Zero() applies with unweighted FSTs</div>
</en-note>      ]]>
    </content>
  </note>
  <note>
    <title>neuron</title>
    <created>20160131T002117Z</created>
    <updated>20160131T002419Z</updated>
    <note-attributes>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
<en-note style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;">
double activation = 0.0;
<div>for (int i = 0; i &lt; n; i++) {</div>
<div>     activation += x[i] + n[i];</div>
<div>}</div>
<div><br/></div>
<div>e = 2.7183 (approx)</div>
<div>a = activation</div>
<div>p = shape of curve</div>
<div><br/></div>
<div>sigmoid</div>
<div>output = 1/1 + e^{-a/p}</div>
<div><br/></div>
<div>class Neuron {</div>
<div>     int num_inputs;</div>
<div>     vector&lt;double&gt; weights;</div>
<div>     Neuron (int num);</div>
<div>}</div>
<div><br/></div>
<div>Neuron::Neuron (int num) : num.inputs(num + 1) {</div>
<div>     for (int i = 0; i &lt;= num; i++) {</div>
<div>          weights.push_back(random());</div>
<div>     }</div>
<div>}</div>
</en-note>      ]]>
    </content>
  </note>
  <note>
    <title>signal processing defn</title>
    <created>20160131T004652Z</created>
    <updated>20160131T004701Z</updated>
    <note-attributes>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
<en-note style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;">
periodic - traces same path
<div>aperiodic - doesn't</div>
<div><br/></div>
<div>cycle - shape that repeats</div>
<div>period - time cycle takes to repeat</div>
<div>Hertz - cycles per second</div>
</en-note>      ]]>
    </content>
  </note>
  <note>
    <title>LuaJ / Scribunto</title>
    <created>20160130T230628Z</created>
    <updated>20160130T230639Z</updated>
    <note-attributes>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">
<en-note style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;">
LuaJ Field Access / function calls
<div><br/></div>
<div>LuaValue globals = JsePlatform.standardGlobals();</div>
<div>LuaValue sqrt = globals.get(&quot;math&quot;).get(&quot;sqrt&quot;);</div>
<div>LuaValue print = globals.get(&quot;print&quot;);</div>
<div>LuaValue d = sqrt.call(a);</div>
<div>print.call(LuaValue.valueOf(&quot;sqrt(5):&quot;), a);</div>
<div><br/></div>
<div>varargs / multiple returns</div>
<div>use invoke(Varargs) or invokemethod(LuaValue, Varargs)</div>
<div>LuaValue modf = globals.get(&quot;math&quot;).get(&quot;modf&quot;);</div>
<div>Varargs r = modf.invoke(d);</div>
<div>print.call(r.arg(1), r.arg(2));</div>
<div><br/></div>
<div>To load / run script: LoadState</div>
<div>LoadState.load(new FileInputStream(&quot;main.lua&quot;), &quot;main.lua&quot;, globals).call();</div>
<div>or require</div>
<div>globals.get(&quot;require&quot;).call(LuaValue.valueOf(&quot;main&quot;))</div>
<div><br/></div>
<div>preinit tables:</div>
<div>listOf(LuaValue[]) - for unnamed elements</div>
<div>tableOf (LuaValue[]) - for named</div>
<div>tableOf(LuaValue[], LuaValue[], Varargs) - mixture</div>
<div><br/></div>
<div>LuaJ - date not implemented</div>
<div><br/></div>
<div>if (format[0] == '!') {</div>
<div>     calendar = Calendar.getInstance(TimeZone.getTimeZone(&quot;GMT&quot;);</div>
<div>} else {</div>
<div>     calendar = Cak,getInst(TimeZone.getDefault());</div>
<div>}</div>
<div><br/></div>
<div>^ also adjust format</div>
<div><br/></div>
<div>DST: TimeZone tz = TimeZone.getDefault();</div>
<div>     bool.isdst = tz.useDaylightTime();</div>
<div><br/></div>
<div>function setTTL ($ttl) {</div>
<div>     $args = func_get_args();</div>
<div>     $this-&gt;checkNumber('setTTL', $args, 0);</div>
<div>     $frame = $this-&gt;getFrameById('current');</div>
<div>     if (is_callable(array($frame, 'setTTL'))) {</div>
<div>          $frame-&gt;setTTL($ttl); // ??</div>
<div>     }</div>
<div>}</div>
<div><br/></div>
<div><br/></div>
<div>Scribunto</div>
<div><br/></div>
<div>Module: Bananas</div>
<div><br/></div>
<div>local p = {}</div>
<div>function p.hello(frame)</div>
<div>     return &quot;Hello world&quot;</div>
<div>end</div>
<div>return p</div>
<div><br/></div>
<div>other page:</div>
<div>{{#invoke:Bananas|hello}}</div>
<div><br/></div>
</en-note>      ]]>
    </content>
  </note>
</en-export>
