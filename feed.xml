<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://jimregan.github.io/notes/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jimregan.github.io/notes/" rel="alternate" type="text/html" /><updated>2021-10-29T04:12:23-05:00</updated><id>https://jimregan.github.io/notes/feed.xml</id><title type="html">notes</title><subtitle>Things I know I'll forget</subtitle><entry><title type="html">Interesting links, 20/10/2021</title><link href="https://jimregan.github.io/notes/links/2021/10/20/misc-links.html" rel="alternate" type="text/html" title="Interesting links, 20/10/2021" /><published>2021-10-20T00:00:00-05:00</published><updated>2021-10-20T00:00:00-05:00</updated><id>https://jimregan.github.io/notes/links/2021/10/20/misc-links</id><author><name></name></author><category term="links" /><summary type="html">Whose Language is it?: Struggles for Language Ownership in an Irish Language Classroom</summary></entry><entry><title type="html">Irish Numbers With Pynini</title><link href="https://jimregan.github.io/notes/2021/10/19/irish-numbers-with-pynini.ipynb" rel="alternate" type="text/html" title="Irish Numbers With Pynini" /><published>2021-10-19T00:00:00-05:00</published><updated>2021-10-19T00:00:00-05:00</updated><id>https://jimregan.github.io/notes/2021/10/19/irish-numbers-with-pynini</id><author><name></name></author><summary type="html">{ &quot;nbformat&quot;: 4, &quot;nbformat_minor&quot;: 0, &quot;metadata&quot;: { &quot;colab&quot;: { &quot;name&quot;: &quot;2021-04-06-install-pynini.ipynb&quot;, &quot;provenance&quot;: [] }, &quot;kernelspec&quot;: { &quot;name&quot;: &quot;python3&quot;, &quot;display_name&quot;: &quot;Python 3&quot; }, &quot;language_info&quot;: { &quot;name&quot;: &quot;python&quot; } }, &quot;cells&quot;: [ { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;xFEIH-D0XotV&quot; }, &quot;source&quot;: [ &quot;# \&quot;Irish number normalisation with Pynini\&quot;\n&quot;, &quot;&gt; \&quot;Is it worth doing?\&quot;\n&quot;, &quot;\n&quot;, &quot;- toc: false\n&quot;, &quot;- branch: master\n&quot;, &quot;- comments: true\n&quot;, &quot;- hidden: true\n&quot;, &quot;- categories: [colab, pynini]&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;colab&quot;: { &quot;base_uri&quot;: &quot;https://localhost:8080/&quot; }, &quot;id&quot;: &quot;tfDvAhJHIh2T&quot;, &quot;outputId&quot;: &quot;5f20c0e9-4f41-4aba-99b4-0e2077b3d841&quot; }, &quot;source&quot;: [ &quot;!pip install -q condacolab\n&quot;, &quot;import condacolab\n&quot;, &quot;condacolab.install()&quot; ], &quot;execution_count&quot;: 1, &quot;outputs&quot;: [ { &quot;output_type&quot;: &quot;stream&quot;, &quot;name&quot;: &quot;stdout&quot;, &quot;text&quot;: [ &quot;‚è¨ Downloading https://github.com/jaimergp/miniforge/releases/latest/download/Mambaforge-colab-Linux-x86_64.sh...\n&quot;, &quot;üì¶ Installing...\n&quot;, &quot;üìå Adjusting configuration...\n&quot;, &quot;ü©π Patching environment...\n&quot;, &quot;‚è≤ Done in 0:00:39\n&quot;, &quot;üîÅ Restarting kernel...\n&quot; ] } ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;0iA099tYGLtQ&quot; }, &quot;source&quot;: [ &quot;%%capture\n&quot;, &quot;!conda install -c conda-forge pynini&quot; ], &quot;execution_count&quot;: null, &quot;outputs&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;SAW8NL4_O6C2&quot; }, &quot;source&quot;: [ &quot;%%capture\n&quot;, &quot;!pip install pyicu&quot; ], &quot;execution_count&quot;: null, &quot;outputs&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;cK6YBArUJXtb&quot; }, &quot;source&quot;: [ &quot;import pynini&quot; ], &quot;execution_count&quot;: 1, &quot;outputs&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;mwzMumS-POHL&quot; }, &quot;source&quot;: [ &quot;import icu\n&quot;, &quot;formatter = icu.RuleBasedNumberFormat(icu.URBNFRuleSetTag.SPELLOUT, icu.Locale('ga'))&quot; ], &quot;execution_count&quot;: 2, &quot;outputs&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;colab&quot;: { &quot;base_uri&quot;: &quot;https://localhost:8080/&quot; }, &quot;id&quot;: &quot;D9uVFc6aPz9H&quot;, &quot;outputId&quot;: &quot;9b9177a6-da66-4a92-c7f5-6d9b9037d269&quot; }, &quot;source&quot;: [ &quot;for i in range(0, 10):\n&quot;, &quot; print(formatter.format(i))&quot; ], &quot;execution_count&quot;: 5, &quot;outputs&quot;: [ { &quot;output_type&quot;: &quot;stream&quot;, &quot;name&quot;: &quot;stdout&quot;, &quot;text&quot;: [ &quot;a n√°id\n&quot;, &quot;a haon\n&quot;, &quot;a d√≥\n&quot;, &quot;a tr√≠\n&quot;, &quot;a ceathair\n&quot;, &quot;a c√∫ig\n&quot;, &quot;a s√©\n&quot;, &quot;a seacht\n&quot;, &quot;a hocht\n&quot;, &quot;a naoi\n&quot; ] } ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;colab&quot;: { &quot;base_uri&quot;: &quot;https://localhost:8080/&quot;, &quot;height&quot;: 130 }, &quot;id&quot;: &quot;Lmu21nSASZhj&quot;, &quot;outputId&quot;: &quot;c52281d9-d4b0-4d59-f994-996df4e0830f&quot; }, &quot;source&quot;: [ &quot;pynini.cross(\&quot;0\&quot;, \&quot;a n√°id\&quot;) | pynini.cross(\&quot;1\&quot;, \&quot;a haon\&quot;)&quot; ], &quot;execution_count&quot;: 16, &quot;outputs&quot;: [ { &quot;output_type&quot;: &quot;execute_result&quot;, &quot;data&quot;: { &quot;text/plain&quot;: [ &quot;&quot; ], &quot;image/svg+xml&quot;: &quot;\n\n\n\n\n\nFST\n\n\n\n15\n\n15\n\n\n\n0\n\n0\n\n\n\n15&amp;#45;&amp;gt;0\n\n\n0:0\n\n\n\n8\n\n8\n\n\n\n15&amp;#45;&amp;gt;8\n\n\n0:0\n\n\n\n1\n\n1\n\n\n\n0&amp;#45;&amp;gt;1\n\n\n48:97\n\n\n\n9\n\n9\n\n\n\n8&amp;#45;&amp;gt;9\n\n\n49:97\n\n\n\n2\n\n2\n\n\n\n1&amp;#45;&amp;gt;2\n\n\n0:32\n\n\n\n3\n\n3\n\n\n\n2&amp;#45;&amp;gt;3\n\n\n0:110\n\n\n\n4\n\n4\n\n\n\n3&amp;#45;&amp;gt;4\n\n\n0:195\n\n\n\n5\n\n5\n\n\n\n4&amp;#45;&amp;gt;5\n\n\n0:161\n\n\n\n6\n\n6\n\n\n\n5&amp;#45;&amp;gt;6\n\n\n0:105\n\n\n\n7\n\n\n7\n\n\n\n6&amp;#45;&amp;gt;7\n\n\n0:100\n\n\n\n10\n\n10\n\n\n\n9&amp;#45;&amp;gt;10\n\n\n0:32\n\n\n\n11\n\n11\n\n\n\n10&amp;#45;&amp;gt;11\n\n\n0:104\n\n\n\n12\n\n12\n\n\n\n11&amp;#45;&amp;gt;12\n\n\n0:97\n\n\n\n13\n\n13\n\n\n\n12&amp;#45;&amp;gt;13\n\n\n0:111\n\n\n\n14\n\n\n14\n\n\n\n13&amp;#45;&amp;gt;14\n\n\n0:110\n\n\n\n&quot; }, &quot;metadata&quot;: {}, &quot;execution_count&quot;: 16 } ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;colab&quot;: { &quot;base_uri&quot;: &quot;https://localhost:8080/&quot; }, &quot;id&quot;: &quot;RqckOt0z7f3p&quot;, &quot;outputId&quot;: &quot;cbc67143-a869-4f26-edc3-4f617697fb38&quot; }, &quot;source&quot;: [ &quot;i = 1\n&quot;, &quot;print(f\&quot;{i:03d}\&quot;)&quot; ], &quot;execution_count&quot;: 10, &quot;outputs&quot;: [ { &quot;output_type&quot;: &quot;stream&quot;, &quot;name&quot;: &quot;stdout&quot;, &quot;text&quot;: [ &quot;001\n&quot; ] } ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;ZEX5R_l0Vef3&quot; }, &quot;source&quot;: [ &quot;count_1_999 = pynini.union(*[pynini.cross(f\&quot;{i:03d}\&quot;, formatter.format(i)) for i in range(1, 1000)])&quot; ], &quot;execution_count&quot;: 3, &quot;outputs&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;d_LdzGoaKv4X&quot; }, &quot;source&quot;: [ &quot;count_1_999_x1000 = pynini.union(*[pynini.cross(f\&quot;{i:03d}\&quot;, formatter.format(i * 1000)) for i in range(1, 1000)])&quot; ], &quot;execution_count&quot;: 4, &quot;outputs&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;colab&quot;: { &quot;base_uri&quot;: &quot;https://localhost:8080/&quot;, &quot;height&quot;: 35 }, &quot;id&quot;: &quot;CjGdOUy9K3kd&quot;, &quot;outputId&quot;: &quot;a73d8549-71bb-4bf0-e93b-095e5d7436b2&quot; }, &quot;source&quot;: [ &quot;(\&quot;999\&quot; @ count_1_999_x1000).string()&quot; ], &quot;execution_count&quot;: 10, &quot;outputs&quot;: [ { &quot;output_type&quot;: &quot;execute_result&quot;, &quot;data&quot;: { &quot;application/vnd.google.colaboratory.intrinsic+json&quot;: { &quot;type&quot;: &quot;string&quot; }, &quot;text/plain&quot;: [ &quot;'naoi gc√©ad n√≥cha is naoi m√≠le'&quot; ] }, &quot;metadata&quot;: {}, &quot;execution_count&quot;: 10 } ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;d7jeWF3cLJCE&quot; }, &quot;source&quot;: [ &quot;count_1_999_x1000000 = pynini.union(*[pynini.cross(f\&quot;{i:03d}\&quot;, formatter.format(i * 1000000)) for i in range(1, 1000)])&quot; ], &quot;execution_count&quot;: 11, &quot;outputs&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;MJPjDcnNLv5t&quot; }, &quot;source&quot;: [ &quot;drop_000 = pynini.cross(\&quot;000\&quot;, \&quot;\&quot;)&quot; ], &quot;execution_count&quot;: 13, &quot;outputs&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;3nKN03uCMJMP&quot; }, &quot;source&quot;: [ &quot;ins_space = pynini.cross(\&quot;\&quot;, \&quot; \&quot;)&quot; ], &quot;execution_count&quot;: 18, &quot;outputs&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;QYHF6eiyMThA&quot; }, &quot;source&quot;: [ &quot;ins_space_or_is = (pynini.cross(\&quot;\&quot;, \&quot; \&quot;) | pynini.cross(\&quot;\&quot;, \&quot; is \&quot;))&quot; ], &quot;execution_count&quot;: 24, &quot;outputs&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;colab&quot;: { &quot;base_uri&quot;: &quot;https://localhost:8080/&quot;, &quot;height&quot;: 35 }, &quot;id&quot;: &quot;Y-yHL4UD9kJN&quot;, &quot;outputId&quot;: &quot;f7ba3738-e731-406e-8cdf-810dd04ca6a2&quot; }, &quot;source&quot;: [ &quot;(\&quot;999\&quot; @ count_1_999_x1000000).string()&quot; ], &quot;execution_count&quot;: 12, &quot;outputs&quot;: [ { &quot;output_type&quot;: &quot;execute_result&quot;, &quot;data&quot;: { &quot;application/vnd.google.colaboratory.intrinsic+json&quot;: { &quot;type&quot;: &quot;string&quot; }, &quot;text/plain&quot;: [ &quot;'naoi gc√©ad n√≥cha is naoi milli√∫n'&quot; ] }, &quot;metadata&quot;: {}, &quot;execution_count&quot;: 12 } ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;kZtT9QhhLkEu&quot; }, &quot;source&quot;: [ &quot;count_1_999999 = (count_1_999_x1000 + drop_000 | count_1_999_x1000 + ins_space + count_1_999 | drop_000 + count_1_999)&quot; ], &quot;execution_count&quot;: 41, &quot;outputs&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;colab&quot;: { &quot;base_uri&quot;: &quot;https://localhost:8080/&quot;, &quot;height&quot;: 35 }, &quot;id&quot;: &quot;-bAJQFIWMA7C&quot;, &quot;outputId&quot;: &quot;79d52b50-e7cf-42af-80e5-765024099017&quot; }, &quot;source&quot;: [ &quot;(\&quot;000001\&quot; @ count_1_999999).string()&quot; ], &quot;execution_count&quot;: 44, &quot;outputs&quot;: [ { &quot;output_type&quot;: &quot;execute_result&quot;, &quot;data&quot;: { &quot;application/vnd.google.colaboratory.intrinsic+json&quot;: { &quot;type&quot;: &quot;string&quot; }, &quot;text/plain&quot;: [ &quot;'a haon'&quot; ] }, &quot;metadata&quot;: {}, &quot;execution_count&quot;: 44 } ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;8QJN56FhQdsJ&quot; }, &quot;source&quot;: [ &quot;We want a fairly large number for this to be worth it; unfortunately, memory limits get in the way, so building up in sections is the only way forward.\n&quot;, &quot;\n&quot;, &quot;IOW, pynini gives no advantage over thrax.&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;gY-FwyOX-M92&quot; }, &quot;source&quot;: [ &quot;#count_0_rbnfmax = pynini.union(*[pynini.cross(f\&quot;{i:03d}\&quot;, formatter.format(i)) for i in range(0, 1000000000000000000)])\n&quot;, &quot;#count_0_1000000000000 = pynini.union(*[pynini.cross(f\&quot;{i:03d}\&quot;, formatter.format(i)) for i in range(0, 1000000000000)])&quot; ], &quot;execution_count&quot;: null, &quot;outputs&quot;: [] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;mqRyoOIFisrb&quot; }, &quot;source&quot;: [ &quot;I can still generate list parts, though&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;lypuMxJ1ftjk&quot; }, &quot;source&quot;: [ &quot;with open(\&quot;count-1-999.tsv\&quot;, \&quot;w\&quot;) as outf:\n&quot;, &quot; for i in range(1, 1000):\n&quot;, &quot; outf.write(f\&quot;{i:03d}\\t{formatter.format(i)}\\n\&quot;)&quot; ], &quot;execution_count&quot;: 46, &quot;outputs&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;3f3_BlxcgkFs&quot; }, &quot;source&quot;: [ &quot;with open(\&quot;count-1-999-thousands.tsv\&quot;, \&quot;w\&quot;) as outf:\n&quot;, &quot; for i in range(1, 1000):\n&quot;, &quot; outf.write(f\&quot;{i:03d}\\t{formatter.format(i * 1000)}\\n\&quot;)&quot; ], &quot;execution_count&quot;: 48, &quot;outputs&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;metadata&quot;: { &quot;id&quot;: &quot;T2sBrMsJhAQC&quot; }, &quot;source&quot;: [ &quot;with open(\&quot;count-1-999-billions.tsv\&quot;, \&quot;w\&quot;) as outf:\n&quot;, &quot; for i in range(1, 1000):\n&quot;, &quot; outf.write(f\&quot;{i:03d}\\t{formatter.format(i * 1000000000)}\\n\&quot;)&quot; ], &quot;execution_count&quot;: 50, &quot;outputs&quot;: [] } ] }</summary></entry><entry><title type="html">Interesting links, 18/10/2021</title><link href="https://jimregan.github.io/notes/links/2021/10/18/misc-links.html" rel="alternate" type="text/html" title="Interesting links, 18/10/2021" /><published>2021-10-18T00:00:00-05:00</published><updated>2021-10-18T00:00:00-05:00</updated><id>https://jimregan.github.io/notes/links/2021/10/18/misc-links</id><author><name></name></author><category term="links" /><summary type="html">xtermjs/xterm.js</summary></entry><entry><title type="html">Merge TextGrid files</title><link href="https://jimregan.github.io/notes/praat/mfa/2021/10/18/merge-textgrids.html" rel="alternate" type="text/html" title="Merge TextGrid files" /><published>2021-10-18T00:00:00-05:00</published><updated>2021-10-18T00:00:00-05:00</updated><id>https://jimregan.github.io/notes/praat/mfa/2021/10/18/merge-textgrids</id><author><name></name></author><category term="praat" /><category term="mfa" /><summary type="html"></summary></entry><entry><title type="html">Download files as zip</title><link href="https://jimregan.github.io/notes/jupyter/2021/10/18/download-files-as-zip.html" rel="alternate" type="text/html" title="Download files as zip" /><published>2021-10-18T00:00:00-05:00</published><updated>2021-10-18T00:00:00-05:00</updated><id>https://jimregan.github.io/notes/jupyter/2021/10/18/download-files-as-zip</id><author><name></name></author><category term="jupyter" /><summary type="html"></summary></entry></feed>